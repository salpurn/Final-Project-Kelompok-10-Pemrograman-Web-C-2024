let contacts = [];
let currentContact = ""; // Keep track of the currently open chat

window.onload = () => {
  fetch("http://localhost:3003/messages")
    .then((response) => response.json())
    .then((messages) => {
      // Extract contacts from messages
      messages.forEach((message) => {
        let fromUser = message.from;
        let toUser = message.to;

        if (!contacts.includes(fromUser)) {
          contacts.push(fromUser);
        }

        if (!contacts.includes(toUser)) {
          contacts.push(toUser);
        }
      });

      // Render UI for each contact
      const userData = document.querySelector(".col-md-4");
      if (!userData) {
        console.error("Element with class 'col-md-4' not found.");
        return;
      }

      contacts.forEach((contact) => {
        const user_friendRow = document.createElement("div");
        user_friendRow.className = "friend-row friend-row--onhover";
        user_friendRow.setAttribute("data-contact", contact);

        const user_pfp = document.createElement("img");
        user_pfp.className = "profile-image";

        const user_containerList = document.createElement("div");
        user_containerList.className = "text";

        const user_displayName = document.createElement("h6");
        user_displayName.className = "text";
        user_displayName.innerHTML = contact;

        user_containerList.appendChild(user_pfp);
        user_containerList.appendChild(user_displayName);
        user_friendRow.appendChild(user_containerList);

        userData.appendChild(user_friendRow);

        // Click event for each friend row
        user_friendRow.addEventListener("click", () => {
          currentContact = contact; // Set the current contact
          displayUserMessages(contact, messages);
        });
      });

      // Function to display messages for a specific contact
      function displayUserMessages(contact, messages, searchTerm = "") {
        const userMessages = messages.filter((message) =>
          (message.from === contact || message.to === contact)
        );

        userMessages.sort((a, b) => new Date(a.timestamp) - new Date(b.timestamp));

        const userDataBanner = document.querySelector(".col-md-8");
        if (!userDataBanner) {
          console.error("Element with class 'col-md-8' not found.");
          return;
        }

        userDataBanner.innerHTML = "";

        const user_banner = document.createElement("div");
        user_banner.className = "settings-tray";

        const user_fullInfo = document.createElement("div");
        user_fullInfo.className = "text";

        const user_numberInfo = document.createElement("h6");
        const user_tapForMoreInfo = document.createElement("p");

        user_numberInfo.innerHTML = contact;
        user_tapForMoreInfo.innerHTML = "Tap for more info";

        user_fullInfo.appendChild(user_numberInfo);
        user_fullInfo.appendChild(user_tapForMoreInfo);
        user_banner.appendChild(user_fullInfo);
        userDataBanner.appendChild(user_banner);

        const chatPanel = document.createElement("div");
        chatPanel.className = "chat-panel";

        userMessages.forEach((message) => {
          const messageRow = document.createElement("div");
          messageRow.className = "row g-0";

          const messageCol = document.createElement("div");
          const chatBubble = document.createElement("div");

          // Determine if the message is from the user or the contact
          if (message.id.fromMe) {
            messageCol.className = "col-md-3 offset-md-9";
            chatBubble.className = "chat-bubble chat-bubble--pink";
          } else {
            messageCol.className = "col-md-3";
            chatBubble.className = "chat-bubble";
          }

          // Format the message body and timestamp
          const messageBody = highlightText(message.body, searchTerm);
          const messageTime = formatTime(message.timestamp);

          chatBubble.innerHTML = `${messageBody} <br><span class="chat-time">${messageTime}</span>`;
          messageCol.appendChild(chatBubble);
          messageRow.appendChild(messageCol);
          chatPanel.appendChild(messageRow);
        });

        userDataBanner.appendChild(chatPanel);
      }

      // Function to highlight search term in text
      function highlightText(text, searchTerm) {
        if (!searchTerm) return text;
        const regex = new RegExp(`(${searchTerm})`, "gi");
        return text.replace(regex, "<mark>$1</mark>");
      }

      // Function to format the timestamp to "HH:MM" format
      function formatTime(timestamp) {
        const date = new Date(timestamp);
        const hours = date.getHours().toString().padStart(2, '0');
        const minutes = date.getMinutes().toString().padStart(2, '0');
        return `${hours}:${minutes}`;
      }

      // Search functionality with highlighting
      document.getElementById("search-box").addEventListener("keyup", (e) => {
        const searchTerm = e.target.value.toLowerCase();
        displayUserMessages(currentContact, messages, searchTerm); // Refresh display with highlighted text
      });

      alert("Data loaded successfully");
    })
    .catch((error) => console.error("Error:", error));
};
